#!/bin/bash
# Hopmod Game Server Control Script

source bin/env.sh

if [[ ! -d bin || ! -d log || ! -d conf || ! -d script ]]; then
    echo "You are missing required directories. Are you sure you are running this script from the top-level directory of your Hopmod installation?"
    exit 1
fi

execOnServer(){
    if [ -p serverexec ] 
    then
        echo $1 > serverexec
    fi
}

case "$1" in
    'start')

        if [ -p serverexec ]
        then
            echo "It appears the game server is already running."
            exit 1
        fi
        
        # enable core dump
        ulimit -c unlimited
        
        # cleanup and intialization
        rm -f log/status.log
        touch log/status.log
        touch log/error.log
        ERROR_START=`stat -c %s log/error.log`
        ERROR_START=$(( $ERROR_START + 1 ))
        
        # start the game server as a background process
        nohup bin/sauer_server $SERVER_OPTIONS 1>log/status.log 2>>log/error.log </dev/null &
        
        #wait for server to start up and print the initial status messages
        until `cat log/status.log | grep -q *READY*`
        do
            #stop if server has terminated
            jobs %- > /dev/null 2>&1
            RUNNING=$?
            if [ "$RUNNING" = "1" ]
            then
                break
            fi
        done
        
        tail -c +$ERROR_START log/error.log
        cat log/status.log
        
        #TODO start up a shell when a specified command line option is set
;;
    'restart')
        execOnServer restart
;;
    'stop')
        execOnServer shutdown
;;
    'start_ircbot')
        nohup bin/irc_bot.pl 1>>log/irc.log 2>>log/irc.log </dev/null &
;;
    'stop_ircbot')
        execOnServer stop_ircbot
;;
    'status')
	if [ -z "$2" ]; then
	    out=`tty`
	else
	    out="$2"
	fi
	execOnServer "write_server_status [$out]"
	sleep 1
;;
    'updateconf')
        execOnServer "reloadscripts"
;;
    'password')
        execOnServer "admin_password $2"
;;
    *)
        $0 start
esac
