
stats_db_filename = "scripts/stats/data/stats.db"
absolute_stats_db_filename = (concatword $PWD [/] $stats_db_filename)
createdb = (! (path? $stats_db_filename) )
latestgame = (now)
upload_player_stats = 0
recording_stats = 0

new sqlite3 statsdb
statsdb onerror [log_error [SQL error in statsdb eval: @arg1]]
statsdb open $stats_db_filename

if $createdb [
    statsdb eval [begin transaction]
    statsdb eval (readfile scripts/stats/stats.db.schema)
    statsdb eval [commit transaction]
] [
    if (! (statsdb compare_schema "scripts/stats/stats.db.schema")) [
        log_error "WARNING Detected schema change in the stats database!"
    ]
]

event_handler $onconnect [
    parameters cn
    if $recording_stats [
        if (! (player_has_var $cn stats_id)) [
            create_player_record $cn
            log_event (format "%1 connected" (player_name $cn))
        ]
    ] [create_match_record]
]

event_handler $ondisconnect [
    parameters cn reason
    if $recording_stats [
        update_player_record $cn
        
        discmsg = "disconnected"
        if (! (= $reason $DISC_NONE)) [discmsg = (format "disconnected (%1)" (disc_reason $reason))]
        log_event (format "%1 %2" (player_name $cn) $discmsg)
    ]
]

event_handler $ondamage [
    parameters target actor damage gun
    player_var $actor damage (+ $damage (player_var $actor damage))
]

event_handler $ondeath [
    parameters offender victim
    
    if (= $offender $victim) [
        player_var $offender suicides (+ 1 (player_var $offender suicides))
    ] [
        player_var $offender frags (+ 1 (player_var $offender frags))
        player_var $offender (player_gun $offender) (+ 1 (player_var $offender (player_gun $offender)))
        
        local teamkill (&& (teamgame) [strcmp (player_team $offender) (player_team $victim)])
        
        if (&& (! $teamkill) (= 1 (player_var $victim had_flag))) [
            player_var $offender ctf_defended (+ 1 (player_var $offender ctf_defended))
        ]
    ]
    
    player_var $victim deaths (+ 1 (player_var $victim deaths))
    player_var $victim had_flag 0
]

event_handler $onitempickup [
    parameters cn type
    player_var $cn $type (+ 1 (player_var $cn $type))
]

event_handler $onendgame [
    if $recording_stats [
        update_player_records
        
        local duration (- (div $gametime 1000) (secsleft))
        statsdb eval [update matches set duration = $duration where id = $match_id] []
        
        local playerscount 0
        statsdb eval [select count(*) as playerscount from players where match_id = $match_id] [playerscount = (column playerscount)]
        statsdb eval [update matches set players = $playerscount where id = $match_id] []
        
        if (capturep) [
            foreach (teams) [
                local team_id (get_captureteam_id $arg1)
                local score (capture_teamscore $arg1)
                statsdb eval [update captureteams set score=$score where id=$team_id] []
            ]
        ]
        
        if $upload_player_stats [
            transferstats //put the unsynced subset of stats into the transfer database.
            system "bin/uploadstats &"
        ]
        
        if (> $stats_filter_policy_min_frags 0) [
            local sumfrags 0
            statsdb eval [select sum(frags) from players where match_id = $match_id] [sumfrags = (column "sum(frags)")]
            if (< $sumfrags $stats_filter_policy_min_frags) [
                delete_match_stats $match_id
                match_id = -1
                log_status [Discarding stats for last match for not meeting minimum frags requirement of @stats_filter_policy_min_frags frags.]
            ]
        ]
        
        if (&& (< $duration $stats_filter_policy_min_duration) (!= $match_id -1)) [
            delete_match_stats $match_id
            match_id = -1
            log_status [Discarding stats for last match for not meeting minimum duration requirement of @stats_filter_policy_min_duration seconds.]
        ]
    ]
]

event_handler $onmapchanged [
    latestgame = (now)
    
    if (! (symbol? rankgame)) [rankgame = 0]
    if (! (symbol? demofile)) [demofile = ""]
    
    create_match_record
]

event_handler $onrename [
    parameters cn oldname newname
    if $recording_stats [
        log_event (format "%1 renamed to %2" $oldname $newname)
        
        update_player_record $cn
        create_player_record $cn
    ]
]

event_handler $onreteam [
    parameters cn oldteam newteam
    if $recording_stats [
        log_event (format "%1 changed to team %2" (player_name $cn) $newteam)
        
        update_player_record $cn
        create_player_record $cn
    ]
]

event_handler $onspectator [
    parameters cn value
    if $value [action = "joined"] [action = "left"]
    if $recording_stats [
        log_event (format "%1 %2 spectators" (player_name $cn) $action)
    ]
]

event_handler $onkick [
    parameters target master
    if $recording_stats [
        log_event (format "%1 was kicked by %2" (player_name $target) (player_name $master))
    ]
]

event_handler $ontakeflag [
    parameters cn
    player_var $cn ctf_pickups (+ 1 (player_var $cn ctf_pickups))
]

event_handler $ondropflag [
    parameters cn
    player_var $cn ctf_drops (+ 1 (player_var $cn ctf_drops))
    player_var $cn had_flag 1
]

event_handler $onreturnflag [
    parameters cn
    player_var $cn ctf_returns (+ 1 (player_var $cn ctf_returns))
]

event_handler $onresetflag [
    parameters owner
    local team_id (player_var $owner ctf_team_id)
    statsdb eval [update ctfteams set resets=resets+1 where id=$team_id] []
]

event_handler $onscoreflag [
    parameters cn
    player_var $cn ctf_scored (+ 1 (player_var $cn ctf_scored))
]

event_handler $oncapturebase [
    parameters team
    local team_id (get_captureteam_id $team)
    statsdb eval [update captureteams set captured=captured+1 where id=$team_id] []
]

event_handler $onlostbase [
    parameters team
    local team_id (get_captureteam_id $team)
    statsdb eval [update captureteams set lost=lost+1 where id=$team_id] []
]

event_handler $onwincapture [
    parameters team
    local team_id (get_captureteam_id $team)
    statsdb eval [update captureteams set win=1 where id=$team_id] []
]

event_handler $onshutdown [
    if $recording_stats [
        update_player_records
        log_event "server shutdown"
    ]
    statsdb close
]

stats_new_match_hook = 1

create_match_record = [
    recording_stats = (&& (newstatsp) [stats_new_match_hook])
    
    local input_datetime (now)
    
    if $recording_stats [
        statsdb eval [insert into matches (datetime,gamemode,mapname) values 
            ($input_datetime, $gamemode, $mapname)] []
        match_id = (statsdb last_rowid)
        if (ctfp) create_ctfteam_records
        if (capturep) create_captureteam_records
        foreach (players) [
            reference cn arg1
            create_player_record $cn
        ]
    ] [match_id = -1]
]

stats_new_player_hook = 1

create_player_record = [
    parameters cn
    if (&& $recording_stats [stats_new_player_hook $cn]) [
        local name (player_name $cn)
        local team (player_team $cn)
        local ipaddr (player_ip $cn)
        
        statsdb eval [insert into players (match_id,name,team,ipaddr) values 
            ($match_id, $name, $team, $ipaddr)] []
        
        player_var $cn stats_id (statsdb last_rowid)
        player_var $cn frags 0
        player_var $cn deaths 0
        player_var $cn suicides 0
        
        if (itemsgame) [create_items_record $cn]
        if (mongunsp) [create_gunusage_record $cn]
        if (ctfp) [create_ctfplayer_record $cn]
        if (capturep) [create_captureplayer_record $cn]
    ]
]

create_items_record = [
    parameters cn
    
    local player_id (player_var $cn stats_id)
    
    statsdb eval [insert into itempickups (player_id) values ($player_id)] []
    
    player_var $cn items_id (statsdb last_rowid)
    player_var $cn boost 0
    player_var $cn health 0
    player_var $cn shells 0
    player_var $cn bullets 0
    player_var $cn rockets 0
    player_var $cn rounds 0
    player_var $cn grenades 0
    player_var $cn cartridges 0
    player_var $cn greenarmor 0
    player_var $cn yellowarmor 0
    player_var $cn quad 0
]

create_gunusage_record = [
    parameters cn
    
    local player_id (player_var $cn stats_id)
    
    statsdb eval [insert into gunusage (player_id) values ($player_id)] []
    
    player_var $cn gunusage_id (statsdb last_rowid)
    player_var $cn pistol 0
    player_var $cn rifle 0
    player_var $cn shotgun 0
    player_var $cn chaingun 0
    player_var $cn rocketlauncher 0
    player_var $cn grenadelauncher 0
]

update_player_record = [
    parameters cn
    if (player_has_var $cn stats_id) [
    
        local id (player_var $cn stats_id)
        local name (player_name $cn)
        local team (player_team $cn)
        local frags (player_var $cn frags)
        local deaths (player_var $cn deaths)
        local suicides (player_var $cn suicides)
        local hits (player_hits $cn)
        local misses (player_misses $cn)
        local damage (player_var $cn damage)
        local kicked (player_var $cn kicked)
        
        if (strcmp $kicked "") [kicked = 0]
        
        statsdb eval [update players set name=$name,team=$team,frags=$frags,deaths=$deaths,
            suicides=$suicides,hits=$hits,misses=$misses,damage=$damage,kicked=$kicked where id=$id] []
        
        if (player_has_var $cn items_id) [update_items_record $cn]
        if (player_has_var $cn gunusage_id) [update_gunusage_record $cn]
        if (player_has_var $cn ctf_id) [update_ctfplayer_record $cn]
        if (player_has_var $cn capture_id) [update_captureplayer_record $cn]
    ]
]

update_items_record = [
    parameters cn
    
    local items_id (player_var $cn items_id)
    local boost (player_var $cn boost)
    local health (player_var $cn health)
    local shells (player_var $cn shells)
    local bullets (player_var $cn bullets)
    local rockets (player_var $cn rockets)
    local rounds (player_var $cn rounds)
    local grenades (player_var $cn grenades)
    local cartridges (player_var $cn cartridges)
    local greenarmor (player_var $cn greenarmor)
    local yellowarmor (player_var $cn yellowarmor)
    local quad (player_var $cn quad)
    
    statsdb eval [update itempickups set boost=$boost,health=$health,shells=$shells,bullets=$bullets,
        rockets=$rockets,rounds=$rounds,grenades=$grenades,cartridges=$cartridges,greenarmor=$greenarmor,
        yellowarmor=$yellowarmor,quad=$quad where id=$items_id] []
]

update_gunusage_record = [
    parameters cn
    
    local gunusage_id (player_var $cn gunusage_id)
    local pistol (player_var $cn pistol)
    local rifle (player_var $cn pistol)
    local shotgun (player_var $cn shotgun)
    local chaingun (player_var $cn chaingun)
    local rocketlauncher (player_var $cn rocketlauncher)
    local grenadelauncher (player_var $cn grenadelauncher)
    
    statsdb eval [update gunusage set pistol=$pistol,rifle=$rifle,shotgun=$shotgun,chaingun=$chaingun,
        rocketlauncher=$rocketlauncher,grenadelauncher=$grenadelauncher where id=$gunusage_id] []
]

update_player_records = [
    statsdb eval [begin transaction] []
    foreach (players) [
        update_player_record $arg1
    ]
    statsdb eval [commit transaction] []
]

create_ctfteam_records = [
    statsdb eval [begin transaction] []
    foreach (teams) [
        reference teamname arg1
        create_ctfteam_record $teamname
    ]
    statsdb eval [commit transaction] []
]

create_ctfteam_record = [
    reference teamname arg1
    statsdb eval [insert into ctfteams (match_id,name) values ($match_id,$teamname)] []
    result (statsdb last_rowid)
]

get_ctfteam_id = [
    parameters teamname
    local id -1
    statsdb eval [select id from ctfteams where name=$teamname and match_id=$match_id] [id = (column id)]
    if (= $id -1) [id = (create_ctfteam_record $teamname)]
    result $id
]

create_ctfplayer_record = [
    parameters cn
    
    //TODO resume existing record
    
    local player_id (player_var $cn stats_id)
    local team_id (get_ctfteam_id (player_team $cn))
    
    statsdb eval [insert into ctfplayers (player_id,team_id) values ($player_id,$team_id)] []
    
    player_var $cn ctf_id (statsdb last_rowid)
    player_var $cn ctf_team_id $team_id
    player_var $cn ctf_pickups 0
    player_var $cn ctf_drops 0
    player_var $cn ctf_scored 0
    player_var $cn ctf_defended 0
    player_var $cn ctf_returns 0
]

update_ctfplayer_record = [
    parameters cn
    
    local ctfplayer_id (player_var $cn ctf_id)
    local pickups (player_var $cn ctf_pickups)
    local drops (player_var $cn ctf_drops)
    local scored (player_var $cn ctf_scored)
    local defended (player_var $cn ctf_defended)
    local returns (player_var $cn ctf_returns)
    local teamkills (player_var $cn teamkills)
    
    if (strcmp $teamkills "") [teamkills = 0]
    
    statsdb eval [update ctfplayers set pickups=$pickups,drops=$drops,scored=$scored,
        defended=$defended,returns=$returns,teamkills=$teamkills where id=$ctfplayer_id] []
    
    local team_id (player_var $cn ctf_team_id)
    statsdb eval [update ctfteams set score=score+$scored,drops=drops+$drops,
        returns=returns+$returns where id=$team_id] []
]

create_captureteam_record = [
    parameters teamname
    statsdb eval [insert into captureteams (match_id,name) values ($match_id,$teamname)] []
    result (statsdb last_rowid)
]

create_captureteam_records = [
    statsdb eval [begin transaction] []
    foreach (teams) [
        create_captureteam_record $arg1
    ]
    statsdb eval [commit transaction] []
]

get_captureteam_id = [
    parameters teamname
    local id -1
    statsdb eval [select id from captureteams where name=$teamname and match_id=$match_id] [id = (column id)]
    if (= $id -1) [id = (create_captureteam_record $teamname)]
    result $id
]

create_captureplayer_record = [
    parameters cn
    
    local player_id (player_var $cn stats_id)
    local team_id (get_captureteam_id (player_team $cn))
    
    statsdb eval [insert into captureplayers (player_id,team_id) values ($player_id,$team_id)] []
    
    player_var $cn capture_id (statsdb last_rowid)
]

update_captureplayer_record = [
    parameters cn
    local teamkills (player_var $cn teamkills)
    if (strcmp $teamkills "") [teamkills = 0]
    statsdb eval [update captureplayers set teamkills=$teamkills] []
]

log_event = [
    parameters message
    if (! (symbol? match_id)) [throw runtime.script.stats.log_event.missing_match_id]
    local timenow (time (now))
    statsdb eval [insert into logevents (match_id,time,message) values ($match_id,$timenow,$message)] []
]

transferstats = [
    new sqlite3 transdb
    transdb open "scripts/stats/data/transtats.db"
    transdb eval [attach database @stats_db_filename as stats] []
    local sql_unsyncd [select * from stats.matches where stats.matches.syncd=0]
    local sql_unsyncd_ids [select id from stats.matches where stats.matches.syncd=0]
    local sql_unsyncd_player_ids [select id from players]
    transdb eval [insert into matches @sql_unsyncd] []
    transdb eval [insert into logevents select * from stats.logevents where stats.logevents.match_id in (@sql_unsyncd_ids)] []
    transdb eval [insert into players select * from stats.players where stats.players.match_id in (@sql_unsyncd_ids)] []
    transdb eval [insert into itempickups select * from stats.itempickups where stats.itempickups.player_id in (@sql_unsyncd_player_ids)] []
    transdb eval [insert into gunusage select * from stats.gunusage where stats.gunusage.player_id in (@sql_unsyncd_player_ids)] []
    transdb eval [insert into ctfplayers select * from stats.ctfplayers where stats.ctfplayers.player_id in (@sql_unsyncd_player_ids)] []
    transdb eval [insert into captureplayers select * from stats.captureplayers where stats.captureplayers.player_id in (@sql_unsyncd_player_ids)] []
    transdb eval [insert into ctfteams select * from stats.ctfteams where stats.ctfteams.match_id in (@sql_unsyncd_ids)] []
    transdb eval [insert into captureteams select * from stats.captureteams where stats.captureteams.match_id in (@sql_unsyncd_ids)] []
    transdb eval [update stats.matches set syncd=1 where syncd=0] []
    transdb close
    delete transdb //just deallocates object, not the db file
]

delete_transtats = [
    new sqlite3 transdb
    transdb open "scripts/stats/data/transtats.db"
    transdb eval [begin transaction] []
    transdb eval [delete from matches] []
    transdb eval [delete from logevents] []
    transdb eval [delete from players] []
    transdb eval [delete from itempickups] []
    transdb eval [delete from gunusage] []
    transdb eval [delete from ctfplayers] []
    transdb eval [delete from captureplayers] []
    transdb eval [delete from ctfteams] []
    transdb eval [delete from captureteams] []
    transdb eval [commit transaction] []
    transdb close
    delete transdb
]

delete_match_stats = [
    parameters mid
    
    statsdb eval [delete from matches where id = $mid] []
    statsdb eval [delete from logevents where match_id = $mid] []
    statsdb eval [delete from ctfteams where match_id = $mid] []
    statsdb eval [delete from captureteams where match_id = $mid] []

    statsdb eval [select * from players where match_id = $mid] [
        local pid (column id)
        
        eval [delete from itempickups where player_id = $pid] []
        eval [delete from gunusage where player_id = $pid] []
        eval [delete from ctfplayers where player_id = $pid] []
        eval [delete from captureplayers where player_id = $pid] []
    ]
    
    statsdb eval [delete from players where match_id = $mid] []
]

showaliases = [
    parameters target
    local exclude (player_name $target)
    if (! $recording_stats) [throw runtime.function.showaliases.no_data]
    local ipaddr (player_ip $target)
    local namelist ""
    statsdb eval [select distinct name from players where ipaddr=$ipaddr and name<>$exclude] [
        namelist = (concatword $namelist [@(column name), ])
    ]
    result $namelist
]

showaliasesbyip = [
    parameters ip
    local namelist ""
    statsdb eval [select distinct name from players where ipaddr=$ip] [
        namelist = (concatword $namelist [@(column name), ])
    ]
    result $namelist
]

exec "scripts/stats/statscmd.cs"

exec "scripts/stats/playerscolpatch.cs"
system "php -f bin/patcher.php"

